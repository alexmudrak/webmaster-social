stages:
- test
- deploy

variables:
  POSTGRES_DB: "$APP_DB_NAME"
  POSTGRES_USER: "$APP_DB_USER"
  POSTGRES_PASSWORD: "$APP_DB_PASS"
  POSTGRES_HOST_AUTH_METHOD: trust

  TEST_DB_HOST: "$APP_DB_HOST"
  TEST_DB_PORT: "$APP_DB_PORT"
  TEST_DB_NAME: "$APP_TEST_DB_NAME"
  TEST_DB_USER: "$APP_DB_USER"
  TEST_DB_PASSWORD: "$APP_DB_PASS"

include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Secret-Detection.gitlab-ci.yml
- template: Security/Dependency-Scanning.gitlab-ci.yml
- template: Jobs/Code-Quality.gitlab-ci.yml

services:
  - name: postgres:15.4

lint-format-tests:
  stage: test
  image: python:3.11
  script:
  - apt-get update -qy
  - apt-get install -y python3.11
  - curl -sSL https://pdm-project.org/install-pdm.py | python3 -
  - export PATH=/root/.local/bin:$PATH
  - pdm install --dev
  - apt-get install -y postgresql-client
  - psql --host=$APP_DB_HOST --username=$APP_DB_USER --dbname=$APP_DB_NAME -c "CREATE DATABASE $APP_TEST_DB_NAME;"
  - pip install pre-commit
  - pre-commit run --all-files

sast:
  stage: test

code_quality:
  services:

deploy-job:
  stage: deploy
  environment: production
  only:
    - master
  script:
    - echo "Deploying application..."
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
    - ssh $SSH_USER@$SSH_HOST "cd app && git pull origin master && docker-compose up
      -d --build"
    - running_containers=$(ssh $SSH_USER@$SSH_HOST "docker ps --format '{{.Names}}'")
    - expected_containers=("app-frontend-1" "app-backend-1" "app-postgres-1")
    - sleep 60
    - |
      for container in "${expected_containers[@]}"; do
        if [[ "$running_containers" != *"$container"* ]]; then
          echo "Error: Container $container is not running."
          exit 1
        fi
      done
    - echo "Application successfully deployed with the expected containers."
    - |
      curl -s \
        -X POST \
        https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
        -d "chat_id=$TELEGRAM_CHAT_ID" \
        -d "text=$TELEGRAM_TEXT"
